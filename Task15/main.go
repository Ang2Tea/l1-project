package main

import (
	"fmt"
)

// Refactoring
// var justString string
// func someFunc() {
//   v := createHugeString(1 << 10)
//   justString = v[:100]
// }

func main() {
	t := someFunc()
	fmt.Println(*t)
}

func someFunc() *string {
	// Лучше избегать глобальные переменных
	// 1 Это опасно так как любой из компонентов может изменить ее
	// 2 Это не эффективно с точки хрения памяти
	// Хотя есть паттерн Синглтон, я все же стараюсь ими не пользоваться
	// Что бы узнать результат делае функцию с возрощаемым значением
	// Так же что бы экономить место используем ссылку, это может быть не критично так как сброщик мусора в скоре отчистит остатки от функции,
	// Но так мы не будем создовать лишнее место вообще

	// Избавляемся от промежуточных переменных, что бы сэкономить пямяти

	// Я пытался обойтись без переменных, но не получилось по итогу вызова у нас создаться 2 переменым
	// 1 с большой строкой
	// 2 с огрызком строки и его мы передадим как ссыклу на main что бы не использовать глобальные переменные
	justString := (*createHugeString(1 << 10))[:100]
	return &justString
}

func createHugeString(t int) *string {
	test := ""
	for i := 0; i < t; i++ {
		test += "1"
	}
	return &test
}
