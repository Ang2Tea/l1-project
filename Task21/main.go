package main

import "fmt"

// Определение wiki
//Адаптер (англ. Adapter) — структурный шаблон проектирования, предназначенный для организации использования функций объекта,
//	недоступного для модификации, через специально созданный интерфейс. Другими словами — это структурный паттерн проектирования,
//	который позволяет объектам с несовместимыми интерфейсами работать вместе.

// Определение Refactoring Guru (САЙТ ЗАБЛОКИРОВАН РОСКОМНАДЗОРОМ)
// Адаптер — это структурный паттерн проектирования, который позволяет объектам с несовместимыми интерфейсами работать вместе.
// Представьте, что вы делаете приложение для торговли на бирже. Ваше приложение скачивает биржевые котировки из нескольких источников в XML,
//	а затем рисует красивые графики.
//	В какой-то момент вы решаете улучшить приложение, применив стороннюю библиотеку аналитики. Но вот беда — библиотека поддерживает только формат данных JSON,
//	несовместимый с вашим приложением.
//	Вы смогли бы переписать библиотеку, чтобы та поддерживала формат XML. Но, во-первых, это может нарушить работу существующего кода, который уже зависит от библиотеки.
//	А во-вторых, у вас может просто не быть доступа к её исходному коду.

// Структуры которые мы не можем или не хотим измеиять
type Cupcake struct{}

func (c *Cupcake) EatCupcake() {
	fmt.Println("Съеден кексик")
}

type Cake struct{}

func (c *Cake) EatCake() {
	fmt.Println("Съеден тортик")
}

// Конец структур

// Пользователь который использует типы реалезующи интерфейс Деликотесов
type Delicious interface {
	Eat()
}

type LoverOfDelicious struct{}

func (l *LoverOfDelicious) EatDelicious(d Delicious) {
	d.Eat()
}

// Конец поьзователя

// Адаптеры которые не изменяя родительский класс адаптирую его к новому интерфейсу
type CupcakeAdapter struct {
	*Cupcake
}

func (c *CupcakeAdapter) Eat() {
	c.EatCupcake()
}

type CakeAdapter struct {
	*Cake
}

func (c *CakeAdapter) Eat() {
	c.EatCake()
}

// Конец адаптеров

func main() {
	// Массив деликотесов показывая что все приводится
	delicacies := [...]Delicious{
		&CakeAdapter{Cake: &Cake{}},
		&CupcakeAdapter{Cupcake: &Cupcake{}},
	}
	// Человек который есть вкусненькое
	person := LoverOfDelicious{}

	// Подача всего вкусненького человека
	for _, value := range delicacies {
		person.EatDelicious(value)
	}

}
